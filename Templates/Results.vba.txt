Attribute VB_Name = "Aggregator"
' Declarations
Dim rootDirectory As String ' root Dir of DKM file strukture
Dim dataPath As String ' copy source and target
Dim filePrefix As String ' file name prefix for the pairing files
Dim competitionName As String ' Name of the competition
Dim importSheet As Worksheet ' Worksheet that contains the imported values

Sub Fetch()
  Dim resultSheet As Worksheet
  Dim targetPath As String
  Dim parameters As Range ' all configuration parameters
  Dim pairIndex As Integer
  Dim evaluationFile As Workbook
  
  Set resultSheet = ActiveSheet
  ' Config Parameters: Assumtion: We wont have more than 200 parameters
  Set parameters = Sheets(ThisWorkbook.Sheets.Count).Range("A3:B203")

  targetPath = ThisWorkbook.Path & "\" & Replace(parameters(1, 2), " ", "") & "\" & resultSheet.Name & "\" ' The target directory for the generated files of this kata

  ' cleanup import area
  resultSheet.Range("AU2:CC200").ClearContents
  
  ' iterate over the pair files
  pairIndex = 0
  pairFile = Dir(targetPath & "*.xlsm")
  Do While pairFile <> ""
    ' open evaluation File
    Set evaluationFile = Workbooks.Open(Filename:=targetPath & pairFile)
    ' Set start number
    Dim startnumber As String
    startnumber = "P-" & evaluationFile.Sheets(1).Cells(5, 11).Value ' Start Number
    resultSheet.Cells(2 + pairIndex, 48).Value = startnumber
    ' Set pair name
    Dim pair As String
    pair = evaluationFile.Sheets(1).Cells(8, 4).Value ' Toris Name
    pair = pair & "-" & evaluationFile.Sheets(1).Cells(9, 4).Value ' Ukes Name
    pair = pair & " (" & evaluationFile.Sheets(1).Cells(8, 11) & ")" ' affiliation
    resultSheet.Cells(2 + pairIndex, 49).Value = pair
    ' Fetch result scores of individual techniques
    Set pairSummarySheet = evaluationFile.Sheets(evaluationFile.Sheets.Count)
    Dim evalIndex As Integer
    For evalIndex = 50 To 71
      resultSheet.Cells(2 + pairIndex, evalIndex).Value = pairSummarySheet.Cells(3, evalIndex - 47).Value
    Next evalIndex
    ' Fetch closing
    resultSheet.Cells(2 + pairIndex, 72).Value = pairSummarySheet.Cells(3, 25).Value
    ' Fetch sum
    resultSheet.Cells(2 + pairIndex, 73).Value = pairSummarySheet.Cells(3, 26).Value
    
    ' Fetch mistake counters
    For evalIndex = 74 To 77
      resultSheet.Cells(2 + pairIndex, evalIndex).Value = pairSummarySheet.Cells(3, evalIndex - 46).Value
    Next evalIndex
    ' Fetch all WR results; cannot loop because values are transposed
    resultSheet.Cells(2 + pairIndex, 78).Value = pairSummarySheet.Cells(8, 26).Value ' Wertung 1
    resultSheet.Cells(2 + pairIndex, 79).Value = pairSummarySheet.Cells(9, 26).Value ' Wertung 2
    resultSheet.Cells(2 + pairIndex, 80).Value = pairSummarySheet.Cells(10, 26).Value ' Wertung 3
    resultSheet.Cells(2 + pairIndex, 81).Value = pairSummarySheet.Cells(11, 26).Value ' Wertung 4
    resultSheet.Cells(2 + pairIndex, 82).Value = pairSummarySheet.Cells(12, 26).Value ' Wertung 5
    pairIndex = pairIndex + 1
    pairFile = Dir
    evaluationFile.Close SaveChanges:=False
  Loop
  BuildTable resultSheet
End Sub

Sub BuildTable(resultSheet As Worksheet)
  Dim pairIndex As Integer
  Dim resultTableIndex As Integer
  Dim resultTableColumnIndex As Integer
  'Dim entry As Range
  ' lastUsedRow = tableSheet.Cells(tableSheet.Rows.Count, 1).End(xlUp).Row
  
  'clear stale data
  resultSheet.Range("A5:AG100").ClearContents
    
  For pairIndex = 2 To resultSheet.Cells(resultSheet.Rows.Count, 48).End(xlUp).Row ' start at second row (first is header) run to last used row
    ' rowCount is used as an index for the target table. it shall run from 5 to (number of pairs -1)
    resultTableIndex = pairIndex + 3
    
    ' transfer pair data and overall score
    resultSheet.Cells(resultTableIndex, 1).Value = pairIndex - 1 ' placement (static information, the rest of the table will be sorted)
    resultSheet.Cells(resultTableIndex, 2).Value = resultSheet.Cells(pairIndex, 48) ' start number
    resultSheet.Cells(resultTableIndex, 3).Value = resultSheet.Cells(pairIndex, 49) ' pair name
    resultSheet.Cells(resultTableIndex, 4).Value = resultSheet.Cells(pairIndex, 73) ' overall score
    ' transfer the jude scores
    For resultTableColumnIndex = 29 To 33
      resultSheet.Cells(resultTableIndex, resultTableColumnIndex).Value = resultSheet.Cells(pairIndex, resultTableColumnIndex + 49)
    Next resultTableColumnIndex
    ' transfer technique scores
    For resultTableColumnIndex = 6 To 27
      resultSheet.Cells(resultTableIndex, resultTableColumnIndex).Value = resultSheet.Cells(pairIndex, resultTableColumnIndex + 44)
    Next resultTableColumnIndex
    ' transfer closing
    resultSheet.Cells(resultTableIndex, 28).Value = resultSheet.Cells(pairIndex, 72)
    
    ' fetch number of mistakes for sorting reasons, put them in a composite key due to excel shortcomings
    ' the composite key is composed like this: BBMMSS where SS is the number of small mistakes, MM the number of medium mistakes, BB the number of big mistakes
    resultSheet.Cells(resultTableIndex, 5).Value = resultSheet.Cells(pairIndex, 76) * 10000 + resultSheet.Cells(pairIndex, 75) * 100 + resultSheet.Cells(pairIndex, 74) ' concatenate big mistake, medium mistake, small mistake
    'optic sugar: scale down pair text
    resultSheet.Cells(resultTableIndex, 3).ShrinkToFit = True
  Next pairIndex
  
  Dim lastUsedRow As Integer
  ' sort data fields by column F ('Gesamtpunkte')
  lastUsedRow = resultSheet.Cells(resultSheet.Rows.Count, 2).End(xlUp).Row
  resultSheet.Range("B5:AG" & lastUsedRow).Sort key1:=resultSheet.Range("D5:D" & lastUsedRow), order1:=xlDescending, key2:=resultSheet.Range("E5:E" & lastUsedRow), order2:=xlAscending ' sort by overall score, then by the mistake count
  
  ' kill number of mistakes column
  resultSheet.Range("E5:E100").ClearContents
  
  ' formatting
  'readability: color each odd line
  For resultTableIndex = 5 To resultSheet.Cells(resultSheet.Rows.Count, 1).End(xlUp).Row
    If resultTableIndex Mod 2 = 0 Then
      resultSheet.Range("A" & resultTableIndex & ":AG" & resultTableIndex).Interior.Color = RGB(217, 217, 217)
    Else
      resultSheet.Range("A" & resultTableIndex & ":AG" & resultTableIndex).Interior.Color = xlNone
    End If
  Next resultTableIndex
  
  
End Sub

