' Copyright (c) 2017, Martin Jung.
' All rights reserved. This program and the accompanying materials
' are made available under the terms of the Apache License Version 2.0, January 2004
' which accompanies this distribution, and is available at
' http://www.apache.org/licenses/

' This is the statistics collector routine

' Declarations
Dim rootDirectory As String ' root Dir of kata evaluation file strukture
Dim dataPath As String ' copy source and target
Dim filePrefix As String ' file name prefix for the pairing files
Dim competitionName As String ' Name of the competition
Dim importSheet As Worksheet ' Worksheet that contains the imported values

Sub Fetch()
  Dim resultSheet As Worksheet
  Dim basePath As String
  Dim kataDirs() As String
  Dim parameters As Range ' all configuration parameters
  Dim pairIndex As Integer
  Dim evaluationFile As Workbook
  
  ReDim kataDirs(20)
    
  Set resultSheet = Sheets(ThisWorkbook.Sheets.Count - 1) ' the database sheet is second to last
  ' Config Parameters: Assumtion: We wont have more than 200 parameters
  Set parameters = Sheets(ThisWorkbook.Sheets.Count).Range("A3:B203")
  
  basePath = ThisWorkbook.Path & "\" & Replace(parameters(1, 2), " ", "") & "\" ' The base directory for all generated files of this tournament

  ' cleanup import area
  resultSheet.Range("A2:ZZ5000").ClearContents
  pairIndex = 2
  
  ' iterate over all kata directories
  kataDir = Dir$(basePath & "*", vbDirectory)
  kataDirsIndex = 0
  Do While kataDir <> ""
    kataDirs(kataDirsIndex) = kataDir
    kataDirsIndex = kataDirsIndex + 1
    kataDir = Dir$
  Loop
  ReDim Preserve kataDirs(kataDirsIndex - 1)
  'iterate over all dirs and all files therein
  For kataDirsIndex = 0 To UBound(kataDirs)
    pairIndex = FetchKata(pairIndex, resultSheet, basePath, kataDirs(kataDirsIndex), parameters)
  Next kataDirsIndex
End Sub

Function FetchKata(startAtRow As Integer, targetSheet As Worksheet, baseDirectory As String, kataDirectory As String, ByVal parameters As Range) As Integer
  Dim retVal As Integer
  Dim resultSheet As Worksheet
  Set resultSheet = targetSheet
  retVal = startAtRow
  If InStr(1, kataDirectory, ".") = 1 Then
    FetchKata = retVal
    Exit Function
  End If
  Dim pairFile As String
  pairFile = Dir(baseDirectory & kataDirectory & "\*.xlsm")
  Do While pairFile <> ""
    retVal = FetchPair(retVal, resultSheet, baseDirectory & kataDirectory & "\" & pairFile, parameters)
    FetchKata = retVal
    pairFile = Dir
  Loop
End Function

Function FetchPair(rowIndex As Integer, resultSheet As Worksheet, pairFileName As String, ByVal parameters As Range) As Integer
  FetchPair = rowIndex
  Dim pairFile As Workbook
  Dim pairSummary As Worksheet
  Dim stringIndex As Integer
  Dim kataName As String
  Dim identifier As String
  Dim pairAffiliation As String
  Dim judgeAffiliation As String
  Dim startnumber As String
  Dim overallPlacement As String
  'open Pair File
  Set pairFile = Workbooks.Open(Filename:=pairFileName)
  Set pairSummary = pairFile.Sheets(pairFile.Sheets.Count)
  
  identifier = pairSummary.Cells(1, 2) ' identifier
  ' extract Affiliation from pair Identified
  pairAffiliation = Left(identifier, Len(identifier) - 1)
  pairAffiliation = Right(pairAffiliation, Len(pairAffiliation) - InStrRev(pairAffiliation, "("))
  kataName = getKatanameFromFilename(pairFileName) ' Kata name
  startnumber = pairFile.Sheets(1).Cells(5, 12) ' start number1
  overallPlacement = FetchPlacement(pairFileName, "P-" & startnumber) 'overall placement
  
  resultSheet.Cells(rowIndex, 1) = identifier
  resultSheet.Cells(rowIndex, 2) = kataName
  resultSheet.Cells(rowIndex, 3) = "P-" & startnumber
  resultSheet.Cells(rowIndex, 4) = pairAffiliation
  resultSheet.Cells(rowIndex, 5) = overallPlacement
  resultSheet.Cells(rowIndex, 6) = parameters.Cells(28, 2)  'judge name -> overall score title
  'resultSheet.Cells(rowIndex, 7) = "'-" 'judge affiliation - blank for summary
  'resultSheet.Cells(rowIndex, 8) = "'-" 'judge position - blank for summary
  'resultSheet.Cells(rowIndex, 9) = "'-"  'supervisor? - blank for summary
  'resultSheet.Cells(rowIndex, 10) = "'-"  'stand-in`? - blank for summary
  resultSheet.Cells(rowIndex, 11) = pairSummary.Cells(3, 26) 'overall score
  'resultSheet.Cells(rowIndex, 12) = "'-" ' deviation - blank for summary
  resultSheet.Cells(rowIndex, 13) = pairSummary.Cells(3, 28) ' small
  resultSheet.Cells(rowIndex, 14) = pairSummary.Cells(3, 29) ' medium
  resultSheet.Cells(rowIndex, 15) = pairSummary.Cells(3, 30) ' big
  resultSheet.Cells(rowIndex, 16) = pairSummary.Cells(3, 31) ' correction
  resultSheet.Cells(rowIndex, 17) = pairSummary.Cells(3, 32) ' omitted
  resultSheet.Cells(rowIndex, 18) = pairSummary.Cells(3, 3) ' opening
  For techniqueIndex = 4 To 24 ' all techniques
    resultSheet.Cells(rowIndex, 15 + techniqueIndex) = pairSummary.Cells(3, techniqueIndex)
  Next techniqueIndex
  resultSheet.Cells(rowIndex, 40) = pairSummary.Cells(3, 25) ' closing
  rowIndex = rowIndex + 1
  ' judge by judge ------------------------------------------------------------------------
  For judgeIndex = 0 To 5
    resultSheet.Cells(rowIndex, 1) = identifier
    resultSheet.Cells(rowIndex, 2) = kataName
    resultSheet.Cells(rowIndex, 3) = "P-" & startnumber
    resultSheet.Cells(rowIndex, 4) = pairAffiliation
    resultSheet.Cells(rowIndex, 5) = overallPlacement
    resultSheet.Cells(rowIndex, 6) = pairSummary.Cells(7 + judgeIndex, 2) 'judge name
    judgeAffiliation = pairSummary.Cells(7 + judgeIndex, 2)
    judgeAffiliation = Left(judgeAffiliation, Len(judgeAffiliation) - 1)
    judgeAffiliation = Right(judgeAffiliation, Len(judgeAffiliation) - InStrRev(judgeAffiliation, "("))
    resultSheet.Cells(rowIndex, 7) = judgeAffiliation
    resultSheet.Cells(rowIndex, 8) = pairSummary.Cells(7 + judgeIndex, 1) 'judge position
    If judgeIndex = 0 Then
      resultSheet.Cells(rowIndex, 9) = True 'supervisor!
    Else
      resultSheet.Cells(rowIndex, 9) = False  '!supervisor
    End If
    If judgeIndex = 6 Then
      resultSheet.Cells(rowIndex, 10) = True 'supervisor!
    Else
      resultSheet.Cells(rowIndex, 10) = False  '!supervisor
    End If
    resultSheet.Cells(rowIndex, 11) = pairSummary.Cells(7 + judgeIndex, 26) 'overall score
    resultSheet.Cells(rowIndex, 12) = pairSummary.Cells(7 + judgeIndex, 27) ' deviation percentage
    resultSheet.Cells(rowIndex, 13) = pairSummary.Cells(7 + judgeIndex, 28) ' small
    resultSheet.Cells(rowIndex, 14) = pairSummary.Cells(7 + judgeIndex, 29) ' medium
    resultSheet.Cells(rowIndex, 15) = pairSummary.Cells(7 + judgeIndex, 30) ' big
    resultSheet.Cells(rowIndex, 16) = pairSummary.Cells(7 + judgeIndex, 31) ' correction
    resultSheet.Cells(rowIndex, 17) = pairSummary.Cells(7 + judgeIndex, 32) ' omitted
    resultSheet.Cells(rowIndex, 18) = pairSummary.Cells(7 + judgeIndex, 3) ' opening
    For techniqueIndex = 4 To 24 ' all techniques
      resultSheet.Cells(rowIndex, 15 + techniqueIndex) = pairSummary.Cells(7 + judgeIndex, techniqueIndex)
    Next techniqueIndex
    resultSheet.Cells(rowIndex, 40) = pairSummary.Cells(7 + judgeIndex, 25) ' closing
    rowIndex = rowIndex + 1
  Next judgeIndex
  pairFile.Close SaveChanges:=False
  FetchPair = rowIndex
End Function

Function getKatanameFromFilename(fn As String) As String
  Dim retVal As String
  retVal = Right(fn, Len(fn) - InStrRev(fn, "\")) ' first, cut to filename only
  retVal = Right(retVal, Len(retVal) - InStr(retVal, "-"))  ' cut the Pxx- prefix up to the first '-'
  retVal = Left(retVal, InStr(retVal, "-") - 1)
  getKatanameFromFilename = retVal
End Function

Function FetchPlacement(pairFileName As String, startnumber As String) As String
  FetchPlacement = "foo"
  Dim rootPath As String
  Dim kataSheetName As String
  Dim resultTable As Workbook
  Dim kataResult As Worksheet
  'determine root path
  ' 1. cut off filename
  rootPath = Left(pairFileName, InStrRev(pairFileName, "\") - 1)
  ' 2. cut off kata dir
  ' first: store the kata dir name as kata sheet name
  kataSheetName = Right(rootPath, Len(rootPath) - InStrRev(rootPath, "\"))
  rootPath = Left(rootPath, InStrRev(rootPath, "\") - 1)
  ' 3. cut off tournament dir
  rootPath = Left(rootPath, InStrRev(rootPath, "\") - 1)
  'open Results List
  Set resultTable = Workbooks.Open(Filename:=rootPath & "\" & "Results.xlsm")
  ' look for kata page
  Set kataResult = resultTable.Sheets(kataSheetName)
  'iterate over table entries
  For pairRow = 5 To kataResult.Cells(kataResult.Rows.Count, 1).End(xlUp).Row ' Results start at row 5, valid rows are filled in column 1
    'look for pairNumber, extract placement; break loop
    If kataResult.Cells(pairRow, 2).Value = startnumber Then
      FetchPlacement = kataResult.Cells(pairRow, 1).Value
      Exit For
    End If
  Next pairRow
  resultTable.Close SaveChanges:=False
End Function

Sub Clear()
  ActiveSheet.Range("A2:AN100").ClearContents
  ActiveSheet.Range("A1:AZ1").Font.Bold = True
End Sub


' Copyright (c) 2019, Martin Jung.
' All rights reserved. This program and the accompanying materials
' are made available under the terms of the Apache License Version 2.0, January 2004
' which accompanies this distribution, and is available at
' http://www.apache.org/licenses/

' This is the statistics processor module. It operates on the data imported by the "ResultCollector"

' Declarations
Dim databaseSheet As Worksheet ' Worksheet that contains the imported values
Dim resultSheet As Worksheet ' Worksheet that contains the final judge rating database
Dim configSheet As Worksheet 'Worksheet that contains the configuration parameters and I18N/L10 Data


Sub Process()
  Set databaseSheet = ThisWorkbook.Sheets("Database")
  Set resultSheet = ThisWorkbook.Sheets("Ãœbersicht")
  Set configSheet = ThisWorkbook.Sheets("Configuration")

  ' kill former results
  killJudgeSheets
  ' determine all available kata and store in an array
  Dim kataNames() As String
  Dim judgeNames() As String
  Dim kata As Variant, judge As Variant ' has to be Variant due to for/each
  kataNames = getUniqueKata()
  ' for each kata
  For Each kata In kataNames
    ' determine the six judges
    Dim kataName As String, judgeName As String
    kataName = kata ' hack to avoid ByRef Error for type variant
    judgeNames = fetchJudgesForKata(kataName)
    ' for each judge
    For Each judge In judgeNames
      judgeName = judge ' hack to avoid ByRef Error for type variant
      ' create or select sheet for judge and kata
      createAndFillJudgeSheet kataName, judgeName
    Next judge
   Next kata
   ThisWorkbook.Sheets(1).Activate
   generateSummary ' transfers judge values to summary sheet
   
End Sub

Sub generateSummary()
  ' clear area
  resultSheet.Range("A3:D10000").Clear
  Dim currentJudgeSheet As Worksheet
  For i = 2 To ThisWorkbook.Sheets.Count
    Set currentJudgeSheet = ThisWorkbook.Sheets(i)
    If InStr(currentJudgeSheet.Name, "__") Then ' this is a judge sheet
      Dim kataName As String, judgeName As String
      Dim judgeRow As Integer, kataColumn As Integer
      Dim judgeCell As Range
      ' determine the kata and judge names
      kataName = Left(currentJudgeSheet.Name, InStr(currentJudgeSheet.Name, "-") - 1)
      judgeName = Right(currentJudgeSheet.Name, Len(currentJudgeSheet.Name) - Len(kataName) - 1)
      judgeName = Left(judgeName, Len(judgeName) - 2)
      ' get Kata Column Index
      kataColumn = resultSheet.Range("B1:Z1").Find(kataName).Column
      
      judgeRow = resultSheet.Cells(Rows.Count, "A").End(xlUp).Row + 1 ' initialize judgeRow to the first empty row -> if we dont find the judge, we take this new row
      Set judgeCell = resultSheet.Range("A2:A302").Find(judgeName) ' look for the judge
      If Not judgeCell Is Nothing Then ' judge is present, set the row
        judgeRow = judgeCell.Row
      End If
      resultSheet.Cells(judgeRow, 1).Value = currentJudgeSheet.Cells(1, 1).Value
      resultSheet.Cells(judgeRow, kataColumn).Value = currentJudgeSheet.Cells(1, 6).Value
    End If
  Next i
  ' format overall summary
  Dim resultCell As Range, resultRange As Range
  Set resultRange = resultSheet.Range("B2:K302")
  For Each resultCell In resultRange
    resultCell.Font.Bold = True
    resultCell.HorizontalAlignment = xlCenter
    Select Case resultCell.Value
     Case Is = "A"
      resultCell.Interior.Color = RGB(0, 255, 0)
     Case Is = "B"
      resultCell.Interior.Color = RGB(255, 255, 0)
     Case Is = "C"
      resultCell.Interior.Color = RGB(255, 0, 0)
    End Select
  Next resultCell
End Sub

'Sub function that creates a sheet per judge and per kata.
Sub createAndFillJudgeSheet(kataName As String, judgeName As String)
  Dim sheetName As String
  sheetName = kataName & "-" & judgeName & "__"
  Dim judgeSheet As Worksheet
  On Error Resume Next
  If (ThisWorkbook.Sheets(sheetName).Name = "") Then
    Debug.Print "Worksheet doesn't exist!"
    Worksheets.Add(After:=ThisWorkbook.Sheets(Sheets.Count)).Name = sheetName
  End If
  
  Set judgeSheet = ThisWorkbook.Sheets(sheetName)
  Dim judgeSheetRowIndex As Integer ' index of next empty row in judge sheet
  ' Fill static content
  judgeSheet.Cells(1, 1).Value = judgeName
  judgeSheet.Cells(1, 2).Value = kataName
  judgeSheet.Cells(1, 4).Value = "Overall Rate:"
  judgeSheet.Cells(1, 5).FormulaLocal = "=MITTELWERT(E3:E1000)"
  judgeSheet.Cells(1, 5).NumberFormat = "0.00%"
  
  judgeSheet.Cells(2, 1).Value = "Paar"
  judgeSheet.Cells(2, 2).Value = "Paarname"
  judgeSheet.Cells(2, 3).Value = "LV"
  judgeSheet.Cells(2, 4).Value = "Gesamtpunkte"
  judgeSheet.Cells(2, 5).Value = "Prozent"
  judgeSheet.Cells(2, 5).HorizontalAlignment = xlRight
  judgeSheet.Cells(2, 6).Value = "Einzelwertungen und Fehler"
  judgeSheetRowIndex = 3 ' next empty row in judge sheet is 3
  
  ' Transfer data
  Dim lastRowIndex As Integer ' will contain the index of the last filled row in the database
  lastRowIndex = databaseSheet.Cells(Rows.Count, "B").End(xlUp).Row
  
  For i = 2 To lastRowIndex ' iterate all rows, and - escape when wrong kata, summary line, supervisor, or wrong judge
    If databaseSheet.Cells(i, 2).Value <> kataName Then
     GoTo NextIteration ' wrong kata
    End If
    If databaseSheet.Cells(i, 8).Value = "" Then
     GoTo NextIteration ' summary line
    End If
    If databaseSheet.Cells(i, 9).Value = True Then
     GoTo NextIteration ' supervisor line
    End If
    If InStr(databaseSheet.Cells(i, 6).Value, judgeName) = 0 Then
     GoTo NextIteration ' wrong judge
    End If
    judgeSheet.Cells(judgeSheetRowIndex, 1).Value = databaseSheet.Cells(i, 3) ' pair number
    judgeSheet.Cells(judgeSheetRowIndex, 2).Value = databaseSheet.Cells(i, 1) ' pair name
    judgeSheet.Cells(judgeSheetRowIndex, 3).Value = databaseSheet.Cells(i, 4) ' pair affiliation
    judgeSheet.Cells(judgeSheetRowIndex, 4).Value = databaseSheet.Cells(i, 11) ' judge score
    judgeSheet.Cells(judgeSheetRowIndex, 4).NumberFormat = "#.0#"
    judgeSheet.Cells(judgeSheetRowIndex, 5).Value = databaseSheet.Cells(i, 12) ' percent
    judgeSheet.Cells(judgeSheetRowIndex, 5).NumberFormat = "0.00%"
    ' insert additional information like individual technique scores
  
    judgeSheetRowIndex = judgeSheetRowIndex + 1
NextIteration:
  Next i
  
  ' Format always start with "Red", then conditionally go to yellow, then green
  judgeSheet.Cells(1, 5).Interior.Color = RGB(255, 0, 0)
  judgeSheet.Cells(1, 6).Interior.Color = RGB(255, 0, 0)
  judgeSheet.Cells(1, 6).Value = "C"
  If judgeSheet.Cells(1, 5).Value >= configSheet.Cells(50, 2).Value Then
    judgeSheet.Cells(1, 5).Interior.Color = RGB(255, 255, 0)
    judgeSheet.Cells(1, 6).Interior.Color = RGB(255, 255, 0)
    judgeSheet.Cells(1, 6).Value = "B"
  End If
  If judgeSheet.Cells(1, 5).Value >= configSheet.Cells(49, 2).Value Then
    judgeSheet.Cells(1, 5).Interior.Color = RGB(0, 255, 0)
    judgeSheet.Cells(1, 6).Interior.Color = RGB(0, 255, 0)
    judgeSheet.Cells(1, 6).Value = "A"
  End If
 
End Sub

Sub killJudgeSheets() ' Helper function. Deletes all generated judge sheets
  For i = ThisWorkbook.Sheets.Count To 1 Step -1
    If InStr(ThisWorkbook.Sheets(i).Name, "__") > 0 Then
      Application.DisplayAlerts = False
      ThisWorkbook.Sheets(i).Delete
      Application.DisplayAlerts = True
    End If
  Next i
  ThisWorkbook.Sheets(1).Range("A2:J10000").Clear ' also clear summary
End Sub

Function fetchJudgesForKata(kataName As String) As String() ' Helper function. Determines all judges that were evaluating a given kata and returns the names as an Array
  Dim dict As Scripting.Dictionary ' Use a dictionary to map to unique values
  Set dict = New Scripting.Dictionary
  
  Dim lastRowIndex As Integer ' will contain the index of the last filled row in the database
  lastRowIndex = databaseSheet.Cells(Rows.Count, "B").End(xlUp).Row
  
  For i = 2 To lastRowIndex ' iterate all rows, and - escape when wrong kata, summary line, or supervisor
    If databaseSheet.Cells(i, 2).Value <> kataName Then
     GoTo NextIteration ' wrong kata
    End If
    If databaseSheet.Cells(i, 8).Value = "" Then
     GoTo NextIteration ' summary line
    End If
    If databaseSheet.Cells(i, 9).Value = True Then
     GoTo NextIteration ' wrong supervisor
    End If
    Dim judgeDesignator As String, judgeName As String
    judgeDesignator = databaseSheet.Cells(i, 6)
    openBracketIndex = InStr(judgeDesignator, "(") - 1
    judgeName = Left(judgeDesignator, openBracketIndex)
    dict(judgeName) = True
NextIteration:
  Next i
  
  ReDim judgeNames(dict.Count - 1) As String ' create an array of correct size

    For i = 0 To dict.Count - 1
        judgeNames(i) = dict.Keys(i) ' transfer the judge names
    Next i
    fetchJudgesForKata = judgeNames

End Function

Function getUniqueKata() As String() ' helper function. Determines all Kata names that were part of the tournament and returns them as an array
    Dim dict As Scripting.Dictionary ' Use a dictionary to map to unique values

    Set dict = New Scripting.Dictionary
    Dim kata As String  ' temporary storage of the kata name
    For Each kataentry In databaseSheet.Range("B2:B100000") ' take all the B column - without the header
        kata = Trim(kataentry.Value)
        If Len(kata) > 0 Then dict(kata) = dict(kata) + 1 ' actually, this counts the entries for a kata which is not necessary.
    Next kataentry
  
  ReDim kataNames(dict.Count - 1) As String ' create an array of correct size

    For i = 0 To dict.Count - 1
        kataNames(i) = dict.Keys(i) ' transfer the kata names
    Next i
    getUniqueKata = kataNames
End Function
